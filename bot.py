import os
import sys
import time
import threading
import requests
from bs4 import BeautifulSoup
import telebot
from flask import Flask
from googletrans import Translator

# =====================
#   –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# =====================
# ‚ö†Ô∏è –ë–µ—Ä–µ–º–æ —Ç–æ–∫–µ–Ω —ñ–∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (–ù–ï –∑ –∫–æ–¥—É)
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    print("[FATAL] –ù–µ –∑–∞–¥–∞–Ω–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN. –î–æ–¥–∞–π —ó—ó –≤ Render ‚Üí Environment.")
    sys.exit(1)

# –ö–∞–Ω–∞–ª –º–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏ —Ç—É—Ç, –∞–±–æ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ CHANNEL_USERNAME
CHANNEL_USERNAME = os.environ.get("CHANNEL_USERNAME", "@stock_news_ua")

# –°—Ç–æ—Ä—ñ–Ω–∫–∏ Yahoo Finance –∑ –Ω–æ–≤–∏–Ω–∞–º–∏
NEWS_URLS = [
    "https://finance.yahoo.com/topic/stock-market-news/",
    "https://finance.yahoo.com/topic/investing/",
    "https://finance.yahoo.com/topic/economic-news/"
]

bot = telebot.TeleBot(BOT_TOKEN)
translator = Translator()
last_posted_link_path = "last_posted.txt"


def _read_last_link():
    try:
        with open(last_posted_link_path, "r", encoding="utf-8") as f:
            return f.read().strip() or None
    except FileNotFoundError:
        return None


def _save_last_link(link: str):
    try:
        with open(last_posted_link_path, "w", encoding="utf-8") as f:
            f.write(link or "")
    except Exception as e:
        print(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {e}")


last_posted_link = _read_last_link()


def get_latest_news():
    """–û—Ç—Ä–∏–º—É—î (title, link) –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –Ω–æ–≤–∏–Ω–∏ –∑ –±—É–¥—å-—è–∫–æ–≥–æ –∑ —Ä–æ–∑–¥—ñ–ª—ñ–≤."""
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
            "(KHTML, like Gecko) Chrome/120.0 Safari/537.36"
        )
    }
    for url in NEWS_URLS:
        try:
            r = requests.get(url, headers=headers, timeout=15)
            r.raise_for_status()
            soup = BeautifulSoup(r.text, "html.parser")

            # 1) —Å–ø—Ä–æ–±–∞: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä—ñ—á–∫–∏
            link_tag = None
            li = soup.find("li", {"class": "js-stream-content"})
            if li:
                link_tag = li.find("a", href=True)

            # 2) –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç: –ø–µ—Ä—à–∏–π –ª—ñ–Ω–∫, —â–æ –≤–µ–¥–µ –Ω–∞ /news/
            if not link_tag:
                for a in soup.select("a[href]"):
                    href = a.get("href", "")
                    if href.startswith("/news/") or "/news/" in href:
                        link_tag = a
                        break

            if not link_tag:
                continue

            href = link_tag.get("href", "")
            link = href if href.startswith("http") else "https://finance.yahoo.com" + href

            title = (link_tag.get_text() or "").strip()
            if not title and li:
                h = li.find(["h3", "h2"])
                if h:
                    title = h.get_text(strip=True)

            if title and link:
                return title, link

        except Exception as e:
            print(f"[ERROR] –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –∑ {url}: {e}")

    return None, None


def post_one_news_if_new():
    """–ü–µ—Ä–µ–∫–ª–∞–¥–∞—î —Ç–∞ –ø—É–±–ª—ñ–∫—É—î –Ω–æ–≤–∏–Ω—É, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–æ–≤–∞ (1 —à—Ç)."""
    global last_posted_link
    title, link = get_latest_news()
    if not title or not link:
        print("[INFO] –ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    if link == last_posted_link:
        print("[INFO] –û—Å—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∞ –≤–∂–µ –ø—É–±–ª—ñ–∫—É–≤–∞–ª–∞—Å—å.")
        return

    # –ü–µ—Ä–µ–∫–ª–∞–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É
    title_uk = title
    try:
        title_uk = translator.translate(title, dest="uk").text
    except Exception as e:
        print(f"[WARN] –ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –≤–¥–∞–≤—Å—è, –ø—É–±–ª—ñ–∫—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª: {e}")

    msg = f"üì∞ {title_uk}\nüîó –î–∂–µ—Ä–µ–ª–æ: {link}"

    try:
        bot.send_message(CHANNEL_USERNAME, msg, disable_web_page_preview=False)
        print(f"[INFO] –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {title_uk}")
        last_posted_link = link
        _save_last_link(link)
    except Exception as e:
        print(f"[ERROR] –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram: {e}")


# Flask-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render (—â–æ–± —Å–µ—Ä–≤—ñ—Å –±–∞—á–∏–≤ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –ø–æ—Ä—Ç)
app = Flask(__name__)

@app.route('/')
def home():
    return "Stock News UA bot is running!"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, threaded=True)


def main_loop():
    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –ö–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤–∏–Ω–∏...")
    post_one_news_if_new()  # –æ–¥—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    while True:
        time.sleep(3600)  # 1 –≥–æ–¥–∏–Ω–∞
        post_one_news_if_new()


if __name__ == "__main__":
    threading.Thread(target=run_flask, daemon=True).start()
    main_loop()

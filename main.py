import os
import sys
import time
import json
import logging
import threading

import feedparser
import telebot
from flask import Flask
from googletrans import Translator

# =========================
#        –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# =========================
# ‚ö†Ô∏è –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º–æ –∑—ñ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (Render ‚Üí Settings ‚Üí Environment)
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    print("[FATAL] –ù–µ –∑–∞–¥–∞–Ω–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN. –î–æ–¥–∞–π —ó—ó —É Render ‚Üí Environment.")
    sys.exit(1)

# –ö–∞–Ω–∞–ª –º–æ–∂–Ω–∞ —Ç–µ–∂ –≤–∏–Ω–µ—Å—Ç–∏ —É –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ CHANNEL_USERNAME; –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî —Ç–≤—ñ–π –∫–∞–Ω–∞–ª
CHANNEL_USERNAME = os.environ.get("CHANNEL_USERNAME", "@stock_news_ua")

# RSS-—Å—Ç—Ä—ñ—á–∫–∏ Yahoo Finance (—à–∏—Ä–æ–∫–µ –ø–æ–∫—Ä–∏—Ç—Ç—è —Ä–∏–Ω–∫—É: S&P500, Nasdaq, –∞–∫—Ü—ñ—ó)
FEEDS = [
    "https://feeds.finance.yahoo.com/rss/2.0/headline?lang=en-US&region=US",
    # –ú–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ RSS —Å—é–¥–∏
]

# –°–∫—ñ–ª—å–∫–∏ –Ω–æ–≤–∏–Ω –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫ (—Ä–∞–∑ –Ω–∞ 2 –≥–æ–¥–∏–Ω–∏)
BATCH_SIZE = 3

# –ö—É–¥–∏ –∑–∞–ø–∏—Å—É—î–º–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (—â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏)
HISTORY_FILE = "posted_links.json"
HISTORY_LIMIT = 300  # –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 300 –ø–æ—Å–∏–ª–∞–Ω—å

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("stock_news_ua")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram —Ç–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á–∞
bot = telebot.TeleBot(BOT_TOKEN)
translator = Translator()

# =========================
#     –î–û–ü–û–ú–û–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á
# =========================
def load_history():
    """–ó—á–∏—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å –∑ —Ñ–∞–π–ª—É."""
    try:
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return set(data if isinstance(data, list) else [])
    except FileNotFoundError:
        return set()
    except Exception as e:
        log.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é ({HISTORY_FILE}): {e}")
        return set()

def save_history(link_set):
    """–ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—Å–∏–ª–∞–Ω—å —É —Ñ–∞–π–ª (–æ–±–º–µ–∂—É—î–º–æ –¥–æ HISTORY_LIMIT)."""
    try:
        arr = list(link_set)
        if len(arr) > HISTORY_LIMIT:
            arr = arr[-HISTORY_LIMIT:]
        with open(HISTORY_FILE, "w", encoding="utf-8") as f:
            json.dump(arr, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é ({HISTORY_FILE}): {e}")

POSTED = load_history()

def fetch_entries_from_feeds(max_items=10):
    """–ó–±–∏—Ä–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ –∑ RSS-—Å—Ç—Ä—ñ—á–æ–∫ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ –ø–µ—Ä—à–∏–º–∏)."""
    entries = []
    for url in FEEDS:
        try:
            feed = feedparser.parse(url)
            if feed.bozo:
                log.warning(f"RSS –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è/–ø–æ–º–∏–ª–∫–∞ –¥–ª—è {url}: {feed.bozo_exception}")
            if not feed.entries:
                continue
            entries.extend(feed.entries)
        except Exception as e:
            log.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è RSS {url}: {e}")

    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∞ —î
    def sort_key(e):
        return e.get("published_parsed") or e.get("updated_parsed") or 0

    entries.sort(key=sort_key, reverse=True)
    return entries[:max_items]

def extract_image_url(entry):
    """–ù–∞–º–∞–≥–∞—î—Ç—å—Å—è –¥—ñ—Å—Ç–∞—Ç–∏ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ RSS-–∑–∞–ø–∏—Å—É (media_content, enclosure —Ç–æ—â–æ)."""
    # 1) media_content
    media = getattr(entry, "media_content", None)
    if media and isinstance(media, list):
        for m in media:
            url = m.get("url")
            if url:
                return url

    # 2) links –∑ type image/*
    for l in entry.get("links", []):
        if l.get("type", "").startswith("image/") and l.get("href"):
            return l["href"]

    # 3) media_thumbnail
    thumbs = getattr(entry, "media_thumbnail", None)
    if thumbs and isinstance(thumbs, list):
        for t in thumbs:
            url = t.get("url")
            if url:
                return url

    return None

def translate_title(title):
    """–ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –∑ fallback –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª."""
    try:
        return translator.translate(title, dest="uk").text
    except Exception as e:
        log.warning(f"–ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–µ –≤–¥–∞–≤—Å—è: {e}")
        return title

def post_item(title, link, image_url=None):
    """–ù–∞–¥—Å–∏–ª–∞—î –æ–¥–∏–Ω –ø–æ—Å—Ç —É –∫–∞–Ω–∞–ª: –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—É–∫—Ä) + –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –æ–ø—Ü—ñ–π–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞."""
    title_uk = translate_title(title)
    caption = f"üì∞ {title_uk}\nüîó –î–∂–µ—Ä–µ–ª–æ: {link}"

    try:
        if image_url:
            bot.send_photo(CHANNEL_USERNAME, image_url, caption=caption)
        else:
            bot.send_message(CHANNEL_USERNAME, caption, disable_web_page_preview=False)
        log.info(f"–û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ: {title_uk}")
        return True
    except Exception as e:
        log.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram: {e}")
        return False

# =========================
#     –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê
# =========================
def post_news_batch():
    """–ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏ –ø—É–±–ª—ñ–∫—É—î –¥–æ BATCH_SIZE (3) –Ω–æ–≤–∏–Ω –±–µ–∑ –¥—É–±–ª—ñ–≤."""
    global POSTED
    entries = fetch_entries_from_feeds(max_items=20)  # –±–µ—Ä–µ–º–æ –∑–∞–ø–∞—Å–æ–º, –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
    if not entries:
        log.info("RSS: –Ω–æ–≤–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    sent = 0
    for e in entries:
        title = (e.get("title") or "").strip()
        link = (e.get("link") or "").strip()
        if not title or not link:
            continue

        if link in POSTED:
            continue

        img = extract_image_url(e)
        if post_item(title, link, image_url=img):
            POSTED.add(link)
            save_history(POSTED)
            sent += 1

        if sent >= BATCH_SIZE:
            break

    if sent == 0:
        log.info("–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó (—É—Å–µ –≤–∂–µ –ø–æ—Å—Ç–∏–ª–∏).")

# =========================
#     FLASK (Render keep-alive)
# =========================
app = Flask(__name__)

@app.route("/")
def home():
    return "Stock News UA bot is running!"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, threaded=True)

# =========================
#     –ì–û–õ–û–í–ù–ò–ô –¶–ò–ö–õ
# =========================
def main_loop():
    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –ö–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏ –ø—É–±–ª—ñ–∫—É—î 3 –Ω–æ–≤–∏–Ω–∏.")
    # –ø–µ—Ä—à–∞ —Å–ø—Ä–æ–±–∞ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É
    try:
        post_news_batch()
    except Exception as e:
        log.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä—à–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")

    while True:
        time.sleep(7200)  # 2 –≥–æ–¥–∏–Ω–∏
        try:
            post_news_batch()
        except Exception as e:
            log.error(f"–ü–æ–º–∏–ª–∫–∞ —É —Ü–∏–∫–ª—ñ: {e}")

if __name__ == "__main__":
    threading.Thread(target=run_flask, daemon=True).start()
    main_loop()
